#GamePlay.fsm

from cozmo_fsm import *
def dummy(a,b):pass
custom_objs.declare_objects = dummy 
from cozmo_objects import CustomObject,CustomObjectTypes, CustomObjectMarkers
from MakeMap import *

class GoToStart(PilotToPose):
	def __init__(self,pose=None):
		super().__init__(pose)
		x,y = self.parent.start1
		self.target_pose=Pose(x,y,0,angle_z = cozmo.util.radians(self.parent.board_ori))

class Initialize(StateNode):
	def start(self,event=None):
		#(board_pose,xchips_pos,ochips_pos,start1,start2) = MakeMap(corner,(x,y,q))
		self.parent.board_ori = q
		self.parent.map_board = MapBoard(corner,x,y,q)
		self.parent.xpos,self.parent.xpick = MapXChips(corner,x,y,q)
		self.parent.opos,self.parent.opick = MapOChips(corner,x,y,q)
		self.parent.start1,self.parent.start2 = MapStart(corner,x,y,q)
		
		#put in rrt obstacles ADD THEM INTO THE WORLD MAP
		robot.world.rrt.auto_obstacles = False
		temp_obs = []
		for i in range(0,5):
			temp_obs.append(Circle(center = transform.point(self.parent.xpos[i]),radius=10))
		for i in range(0,4):
			temp_obs.append(Circle(center = transform.point(self.parent.opos[i]),radius=10))
		robot.world.rrt.set_obstacles = temp_obs
		
		super().start()
		self.post_completion()


class PlanMove(StateNode):
	def start(self,event=None):
		state = self.parent.est_board
		player = self.parent.player
		self.parent.move_made = tile = GameEst(state,player) #between 0 and 8 inclusive
		
		#want to get next chip pos 
		if player == 'X':
			chip_number = self.parent.move_count # will be max 5 
			chip_pos    = xpickup_pos[chip_number]
		else:
			#player = 'O'
			chip_number = self.parent.move_count # will be max 4
			chip_pos    = opickup_pos[chip_number]
		self.parent.move_count += 1
		#go to animation nodes
		if tile == 10:
			#X cozmo won
			self.post_success()
		if tile == 11:
			#O cozmo won
			self.post_failure()
		#HAVE TO FIGURE OUT ADDING AND REMOVING CHIPS AS OBSTACLES
		#WE NEED TO ADD THEM TO THE WORLD MAP


class GamePlay(StateMachineProgram):
	def start(self):
		self.player = 'X' # 'O;
		self.move_made = -1
		self.move_recieved = -1
		self.move_count = 0
		self.est_board = [' ']*9
		self.map_board = []
		self.xpos = []
		self.xpick = []
		self.opos = []
		self.opick = []
		self.start1 = (-1,-1)
		self.start2 = (-1,-1)
		self.board_ori = 0

		corner1 = robot.world.define_custom_box(CustomObjectTypes.CustomType10,
												CustomObjectMarkers.Cirlces2,
												CustomObjectMarkers.Diamonds2,
												CustomObjectMarkers.Hexagons2,
												CustomObjectMarkers.Triangles2,
												CustomObjectMarkers.Circles3,
												CustomObjectMarkers.Diamonds3,
												40,40,0,1,40,40,True)

		corner2 = robot.world.define_custom_box(CustomObjectTypes.CustomType11,
												CustomObjectMarkers.Hexagons3,
												CustomObjectMarkers.Triangles3,
												CustomObjectMarkers.Circles4,
												CustomObjectMarkers.Diamonds4,
												CustomObjectMarkers.Hexagons4,
												CustomObjectMarkers.Triangles4,
												40,40,0,1,40,40,True)

		super().start()

	$setup{

		start: StateNode() =T(1)=> Initialize() =C=> GoToStart() =C=> plan
		plan: PlanMove() =D()=> move 
		move: PickUpChip() =C=> Forward(100) =CNext=> PlaceChip() =C=> GoToStart() =C=> TellR2()
	}


